import static org.gradle.api.tasks.wrapper.Wrapper.DistributionType.ALL

plugins {
    id "nebula.optional-base" version "3.2.0"
    id "com.palantir.git-version" version "0.8.0"
}

ext {
    feignVersion = "9.5.1"
}

apply plugin: "java"
apply plugin: "jacoco"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
    jcenter()
}

dependencies {
    compile "io.github.openfeign:feign-core:${feignVersion}"
    compile "io.github.openfeign:feign-jackson:${feignVersion}"
    compile "io.github.openfeign:feign-jaxb:${feignVersion}"
    compile "io.github.openfeign:feign-slf4j:${feignVersion}"
    compile "org.slf4j:slf4j-api:1.7.25"

    compile "com.google.code.findbugs:jsr305:3.0.1", optional
    compile "org.projectlombok:lombok:1.16.12", optional
    compile "javax.validation:validation-api:1.1.0.Final", optional

    testRuntime "org.codehaus.janino:janino:3.0.7"

    testCompile "junit:junit:4.12"
    testCompile "ch.qos.logback:logback-classic:1.2.3"
    testCompile "io.github.benas:random-beans:3.7.0"
    testCompile "org.assertj:assertj-core:3.8.0"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
    distributionType = ALL
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

jacocoTestReport {
    group = "report"
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled false
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }

    outputs.upToDateWhen { false }

    systemProperties System.properties
    systemProperties 'logback.configurationFile' : new File(projectDir,'src/test/resources/logback.xml').absolutePath

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle("Running test: " + descriptor)
    }

    // listen to standard out and standard error of the test JVM(s)
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }
}